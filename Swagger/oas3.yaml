openapi: 3.0.0

info:
    title: Treport
    version: v.0

paths:  
    /users:
        get:
            description: Get a user list. (/users?user_level={user_level}).
            parameters:
              - in: query
                name: user_level
                description: Get all user of the given user_level.
                schema:    
                    $ref: "#/components/schemas/User_level"
            responses:
              "200":
                description: Correctly sent users list.
                content:
                    application/json:
                        schema:
                            type: array
                            items: 
                                $ref: "#/components/schemas/User" 
        post:
            description: Add new user
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            $ref: "#/components/schemas/User"
                required: true

            responses:
              "201":
                description: New user added
                headers:
                    "Location":
                        description: Link to the newly created user
                        schema:
                            type: string
    /users/{id}:
        get:
            description: Get a user by id
            responses:
              "200":
                description: User sent correctly.
        delete:
            description: Delete a user.
            responses:
                "204":
                    description: User deleted.

    /reports:
        get:
            description: Get a list of reports. (/reports?state={state}&kind={kind}&category={category}&position={position})
            parameters:
                -   in: query
                    name: state
                    description: Filters the reports based on a state
                    schema:
                        $ref: "#/components/schemas/State"
                -   in: query
                    name: kind
                    description: Filters the reports based on a kind
                    schema: 
                        $ref: "#/components/schemas/Kind"
                -   in: query
                    name: category
                    description: Filters the reports based on a category
                    schema: 
                        $ref: "#/components/schemas/Category"
                -   in: query
                    name: position
                    description: Returns all the reports within 1 kilometer from the given position 
                    schema: 
                        $ref: "#/components/schemas/Position"
            responses: 
                "200":
                    description: Correctly sent a list of reports
                    content:
                        application/json:
                            schema:
                                type: array
                                items: 
                                    $ref: "#/components/schemas/Report"
        post:
            description: Add a new report.
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Report"
                required: true
            responses:
                "201":
                    description: Added a new report
                    headers:
                        "Location":
                            description: Link to the newly created report.
                            schema:
                                type: string
                "400":
                    description: Error in report saving (User may not exist or some attributes are missing).
    /reports/{id}:
        get:
            description: Get a report by the id.
            
            responses:
                "200":
                    description: Correctly sent the report.
                "404": 
                    description: Report was not found. (Id may be wrong or the report may not exist).
        put:
            description: Update the given report. (Only votes and state can be updated).
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                votes: 
                                    type: integer
                                state:
                                    $ref: "#/components/schemas/State"
                required: true
            responses:
                "200":
                    description: Corectly updated the report.
                "404":
                    description: Report was not found. (Id may be wrong or report may not exist).
        delete:
            description: Delete a report
            responses:
                "204":
                    description: Report deleted.
                "404":
                    description: Report was not found and could not be deleted(Id may be wrong)

    /reports/{id}/comments:
        get:
            description: Get a list of all the comments of a report. (/reports/{id}/comments?user={user})
            parameters:                
                -   in: query
                    name: user
                    description: Get all comments about a report of a given user.
                    schema:
                        type: integer

            responses:
                "200":
                    description: Comments list sent
                    content:
                        application/json:
                            schema:
                                type: array
                                items: 
                                    $ref: "#/components/schemas/Comment"
        post:
            description: Add new comment to a report
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            $ref: "#/components/schemas/Comment"
                required: true

            responses:
              "201":
                description: New user comment added
                headers:
                    "Location":
                        description: Link to the newly created comment
                        schema:
                            type: string
    /reports/{id}/comments/{id}:
        get:
            description: Get a specific comment of a given report
            responses:
                "200":
                    description: Comment sent correctly
        
        delete:
            description: Delete a comment of a given report
            responses:
                "204":
                    description: Comment deleted

    
    /notifications:
        get:
            description: Get a list of notifications. (/notification?user={user})
            parameters:
                -   in: query
                    name: user
                    description: Filter the notification by a given user
                    schema:
                        type: integer
            responses:
                "200":
                    description: Notification list sent.
                    content:
                        application/json:
                            schema:
                                type: array
                                $ref: "#/components/schemas/Notification"
        post:
            description: Create new notification
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            $ref: "#/components/schemas/Notification"
 
            responses:
                "201":
                    description: New notification added
                    headers:
                        "Location":
                            description: Link to the newly created notification
                            schema:
                                type: string

    /notifications/{id}:
        get:
            description: Get a notification with a given id.
            responses:
                "200":
                    description: Notification sent correctly.
        
        delete:
            description: Delete a notification with a given id.
            responses:
                "204":
                    description: Notification deleted



components:
    schemas:
        Report:
            type: object
            properties:
                id:
                    type: integer
                title: 
                    type: string
                content:
                    type: string
                user:
                    type: string
                votes:
                    type: integer
                position:
                    $ref: "#/components/schemas/Position"
                kind:
                    $ref: "#/components/schemas/Kind"
                category:
                    $ref: "#/components/schemas/Category"
                state:
                    $ref: "#/components/schemas/State"
                comments:
                    type: array
                    items: 
                        $ref: "#/components/schemas/Comment"

        Comment:
            type: object
            properties:
                id: 
                    type: integer
                content:
                    type: string
                user:
                    type: string

        User:
            type: object
            properties:
                id:
                    type: integer
                name:
                    type: string
                email:
                    type: string
                user_level:
                    $ref: "#/components/schemas/User_level"  
                reports:
                    type: array
                    items: 
                        type: string

        Notification:
            type: object
            properties:
                id:
                    type: integer
                title:
                    type: string
                content:
                    type: string
                report:
                    type: string
                user:
                    type: array
                    items: 
                        type: string


        Kind: 
            type: string
            enum: [report, suggestion, complaint]

        Category:
            type: string
            enum: [lights, roads, trash]

        State:
            type: string
            enum: [active, work in progress, archived]

        User_level:
            type: string
            enum: [citizen, admin, not_logged]
            
        Position:
            type: string
