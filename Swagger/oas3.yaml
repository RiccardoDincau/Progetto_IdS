openapi: 3.0.0

info:
    title: Treport
    version: v.0

paths:
    /users:
        get:
            description: Get a user list. (/users?user_level={user_level}).
            parameters:
                - in: query
                  name: user_level
                  description: Get all user of the given user_level.
                  schema:
                      $ref: "#/components/schemas/User_level"

            responses:
                "200":
                    description: Correctly sent users list. (Attribute reports is of the type [ "/reports/:id" ]).
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/User_GET"
                "400":
                    description: The user level is not defined.
                "404":
                    description: No user has been found.
        post:
            description: Add new user.
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            $ref: "#/components/schemas/User_POST"
                required: true

            responses:
                "201":
                    description: New user added.
                    headers:
                        "Location":
                            description: Link to the newly created user.
                            schema:
                                type: string
                "400":
                    description: Id may be wrong, attribute may be missing, email may be already used.
    /users/{id}:
        get:
            description: Get a user by id.
            responses:
                "200":
                    description: User sent correctly. (Attribute reports is of the type [ "/reports/:id" ]).
                    content:
                        application/json:
                            schema:
                                type: object
                                $ref: "#/components/schemas/User_GET"
                "400":
                    description: Id may not be correctly formatted.
                "404":
                    description: User was not found.
        delete:
            description: Delete a user.
            responses:
                "204":
                    description: User deleted.

            security:
                - authToken: []

    /reports:
        get:
            description: Get a list of reports. (/reports?user={user}&state={state}&kind={kind}&category={category}&position={position})
            parameters:
                - in: query
                  name: user
                  description: Returns only the reports of a given user. (Query value must be of the type "/user/:id").
                  schema:
                      type: string
                - in: query
                  name: state
                  description: Filters the reports based on a state.
                  schema:
                      $ref: "#/components/schemas/State"
                - in: query
                  name: kind
                  description: Filters the reports based on a kind.
                  schema:
                      $ref: "#/components/schemas/Kind"
                - in: query
                  name: category
                  description: Filters the reports based on a category.
                  schema:
                      $ref: "#/components/schemas/Category"
                - in: query
                  name: position
                  description: Returns all the reports within 1 kilometer from the given position.
                  schema:
                      $ref: "#/components/schemas/Position"

            responses:
                "200":
                    description: Correctly sent a list of reports. (Attribute user is of the type "/user/:id", attribute comments is of the type [ "/report/:id" ])
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/Report_GET"
                "400":
                    description: Queries values may be wrong.
                "404":
                    description: The user's id set as query has not been found.

        post:
            description: Add a new report.
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Report_POST"
                required: true

            security:
                - authToken: []

            responses:
                "201":
                    description: Added a new report
                    headers:
                        "Location":
                            description: Link to the newly created report.
                            schema:
                                type: string
                "400":
                    description: Error in report saving (User may not exist or some attributes are missing).

    /reports/{id}:
        get:
            description: Get a report by the id.

            responses:
                "200":
                    description: Correctly sent the report. (Attribute comments is of the type [ "/reports/:repID/comments/:commID" ], attribute user is of the type "users/:id").
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Report_GET"
                "404":
                    description: Report was not found. (Id may be wrong or the report may not exist).
                "400":
                    description: The given report's id is not valid.

        put:
            description: Update the given report. State can only be updated by admins.
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                state:
                                    $ref: "#/components/schemas/State"
                required: true
            responses:
                "200":
                    description: Corectly updated the report.
                "404":
                    description: Report was not found. (Id may be wrong or report may not exist).
                "403":
                    description: Report's update is not allowed to the user.
                "400":
                    description: May be an error in the notification's sending process.
        delete:
            description: Delete a report
            responses:
                "204":
                    description: Report deleted.
                "404":
                    description: Report was not found and could not be deleted(Id may be wrong).
                "403":
                    description: Report's delete is not allowed to the user.
            security:
                - authToken: []

    /reports/{id}/comments:
        get:
            description: Get a list of all the comments of a report. (/reports/{id}/comments?user={user})
            parameters:
                - in: query
                  name: user
                  description: Get all comments about a report of a given user.
                  schema:
                      type: integer

            responses:
                "200":
                    description: Comments list sent. (Attribute user is of the type "/user/:id")
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/Comment_GET"
                "404": 
                    description: No report has been found with the given id.
                "400":
                    description: May be a malformed report's id or a malformed user's id in the query.
        post:
            description: Add new comment to a report. (Attribute user must be of the type "/users/:id")
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            $ref: "#/components/schemas/Comment_POST"
                required: true

            security:
                - authToken: []

            responses:
                "201":
                    description: New user comment added
                    headers:
                        "Location":
                            description: Link to the newly created comment
                            schema:
                                type: string
                "404":
                    description: Given report has not been found
                "400":
                    description: Error in comment's saving (may be malformed report's id, a missing attribute in the request or the malformed content).

    /reports/{id}/comments/{id}:
        get:
            description: Get a specific comment of a given report.
            responses:
                "200":
                    description: Comment sent correctly. (Attribute user is of the type "/users/:id")
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Comment_GET"
                "400":
                    description: May be invalid report's id or invalid comment's id.
                "404":
                    description: No comment with the given id has been found.

        delete:
            description: Delete a comment of a given report.
            responses:
                "204":
                    description: Comment deleted.
                "403":
                    description: The comment's delete is not authorized
                "400":
                    description: May be invalid report's id or invalid comment's id

    /reports/{id}/image:
        get:
            description: Get the image of a given report.
            responses:
                "200":
                    description: Image correctly sent.
                    content:
                        image/*:
                            schema:
                                type: string
                                format: binary
                "400":
                    description: Id not valid.
                "404":
                    description: Report not found, image not found.

        post:
            description: Add a new image to the  given report.
            requestBody:
                content:
                    image/*:
                        schema:
                            type: string
                            format: binary
                required: true

            security:
                - authToken: []

            responses:
                "201":
                    description: Image correctly saved
                    headers:
                        "Location":
                            description: Link to the newly created image.
                            schema:
                                type: string
                "400":
                    description: Id not valid.
                "404":
                    description: Report not found.

    /reports/{id}/votes:
        get:
            description: Check if a user has liked the given report. Requires authentication.

            security:
                - authToken: []

            responses:
                "200":
                    description: The vote has correctly been checked.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    hasLiked:
                                        type: boolean
                "400":
                    description: Report ID is not valid.
                "404":
                    description: Report was not found.

        put:
            description: Update votes of a given report. Requires authentication.
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                liked:
                                    type: boolean

            security:
                - authToken: []

            responses:
                "200":
                    description: Correctly updated the report. Returns the total number of votes.
                    content:
                        application/json:
                            schema:
                                type: integer
                "400":
                    description: Report ID is not valid.
                "404":
                    description: Report was not found.

    /users/{id}/notifications:
        get:
            description: Get the notifications of a given user.

            security:
                - authToken: []

            responses:
                "200":
                    description: Notification list sent. (Attribute report is of the type "/reports/:id")
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/Notification_GET"
                "400":
                    description: User id is not valid.
                "403":
                    description: Can not get the notifications of another users.
                "404":
                    description: User not found.

    /users/{id}/notifications/{id}:
        get:
            description: Get a notification with a given id of a user.
            responses:
                "200":
                    description: Notification sent correctly. (Attribute report is of the type "/reports/:id")
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Notification_GET"
                "400":
                    description: User o notification id sono sbagliati.
                "403":
                    description: Can not get the notifications of another users.
                "404":
                    description: Notification not found.

            security:
                - authToken: []

        delete:
            description: Delete a notification with a given id.

            security:
                - authToken: []

            responses:
                "204":
                    description: Notification deleted
                "400":
                    description: ID not accepted
                "403":
                    description: Can not get the notifications of another users.
                "404":
                    description: Notification not found

    /authentication:
        post:
            description: Get a JWT token for authentication.

            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                email:
                                    type: string
                                password:
                                    type: string

            responses:
                "200":
                    description: User authenticaded correctly. JWT token sent.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success:
                                        type: boolean
                                    token:
                                        type: string
                                    email:
                                        type: string
                                    id:
                                        type: string
                                    user_level:
                                        $ref: "#/components/schemas/User_level"

                "400":
                    description: Missing attribute, email is malformed. Authentication failed.
                "404":
                    description: User not found.
    /district_user:
        post: 
            description: Add new user.
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            $ref: "#/components/schemas/User_POST"
                required: true

            responses:
                "201":
                    description: New user added.
                    headers:
                        "Location":
                            description: Link to the newly created user.
                            schema:
                                type: string
                "400":
                    description: Id may be wrong, attribute may be missing, email may be already used.
                "403":
                    description: Unauthorized district user's registration

            security:
                - authToken: []
    

components:
    schemas:
        Report_GET:
            type: object
            properties:
                id:
                    type: integer
                title:
                    type: string
                content:
                    type: string
                user:
                    type: string
                votes:
                    type: integer
                position:
                    $ref: "#/components/schemas/Position"
                kind:
                    $ref: "#/components/schemas/Kind"
                category:
                    $ref: "#/components/schemas/Category"
                state:
                    $ref: "#/components/schemas/State"

        Report_POST:
            type: object
            properties:
                title:
                    type: string
                content:
                    type: string
                position:
                    $ref: "#/components/schemas/Position"
                kind:
                    $ref: "#/components/schemas/Kind"
                category:
                    $ref: "#/components/schemas/Category"
                state:
                    $ref: "#/components/schemas/State"

        Comment_GET:
            type: object
            properties:
                id:
                    type: integer
                content:
                    type: string
                user:
                    type: string

        Comment_POST:
            type: object
            properties:
                content:
                    type: string

        User_GET:
            type: object
            properties:
                id:
                    type: integer
                name:
                    type: string
                email:
                    type: string
                user_level:
                    $ref: "#/components/schemas/User_level"
                reports:
                    type: array
                    items:
                        type: string

        User_POST:
            type: object
            properties:
                name:
                    type: string
                email:
                    type: string
                user_level:
                    $ref: "#/components/schemas/User_level"
                password:
                    type: string

        Notification_GET:
            type: object
            properties:
                id:
                    type: integer
                title:
                    type: string
                content:
                    type: string
                report:
                    type: string

        Kind:
            type: string
            enum: [report, suggestion, complaint]

        Category:
            type: string
            enum: [lights, roads, trash, green_areas]

        State:
            type: string
            enum: [active, work in progress, archived]

        User_level:
            type: string
            enum: [citizen, district, admin]

        Position:
            type: string

    securitySchemes:
        authToken:
            type: http
            scheme: bearer
            bearerFormat: JWT
